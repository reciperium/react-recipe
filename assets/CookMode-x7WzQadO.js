import{j as p}from"./jsx-runtime-CkxqCPlQ.js";import{S as C}from"./Switch-CB69zTX9.js";import{r as a}from"./index-DJO9vBfz.js";const c=r=>console.warn("[react-screen-wake-lock]: "+r),h=({onError:r,onRequest:n,onRelease:t}={})=>{const[u,s]=a.useState(!0),e=a.useRef(null),o=typeof window<"u"&&"wakeLock"in navigator,d=a.useCallback(async(i="screen")=>{const k=e.current!=null;if(!o)return c("Calling the `request` function has no effect, Wake Lock Screen API isn't supported");if(k)return c("Calling `request` multiple times without `release` has no effect");try{e.current=await navigator.wakeLock.request(i),e.current.onrelease=l=>{s(e.current&&e.current.released||!0),t&&t(l),e.current=null},n&&n(),s(e.current&&e.current.released||!1)}catch(l){r&&r(l)}},[o,n,r,t]),f=a.useCallback(async()=>{const i=e.current==null;if(!o)return c("Calling the `release` function has no effect, Wake Lock Screen API isn't supported");if(i)return c("Calling `release` before `request` has no effect.");e.current&&await e.current.release()},[o]);return{isSupported:o,request:d,released:u,release:f,type:e.current&&e.current.type||void 0}};function w({...r}){const{isSupported:n,released:t,request:u,release:s}=h();return p.jsx(C,{...r,checked:!t,onCheckedChange:()=>t===!1?s():u(),disabled:!n,title:n?t?"Cook Mode is off":"Cook Mode is on":"Cook Mode is not supported"})}w.__docgenInfo={description:"",methods:[],displayName:"CookMode"};export{w as C};
